#!/usr/bin/env node

const logger = require("js-logger");
logger.useDefaults();

const pathlib = require('path');
const fs = require('fs');

const {Package} = require("..");

const cmd = require("commander");


cmd.version(`v${require("../package.json").version}`, "-v --version");


cmd.command("init")
    .description("initialize the current directory as the root of an olojs document package")
    .action(async () => {
        try {
            logger.info(`@stilo: Initializing stilo package ...`);
            const package = await Package.create(process.cwd());
            logger.info("@stilo: Package successfully initialized.");

        } catch (error) {
            logger.error(error.message);
        }
    });


cmd.command("install <plugin>")
    .description("install a plugin")
    .action(async (packageId) => {
        logger.info(`@stilo: installing ${packageId}`);
        try {
            const package = Package.find(process.cwd());
            if (packageId[0] === '.') {
                packageId = pathlib.join(process.cwd(), packageId);
            }
            await package.install(packageId);
            logger.info(`@stilo: ${packageId} plugin installed`);

        } catch (error) {
            logger.error(error.message);
        }
    });


cmd.command("uninstall <plugin>")
    .description("uninstall a plugin")
    .action(async (packageId) => {
        logger.info(`@stilo: uninstalling ${packageId}`);
        try {
            const package = Package.find(process.cwd());
            await package.uninstall(packageId);
            logger.info(`@stilo: ${packageId} plugin uninstalled`);

        } catch (error) {
            logger.error(error.message);
        }
    });


cmd.command("read <path>")
    .description("fetche a document source and print it to the stdout")
    .action(async path => {
        try {
            const package = Package.find(process.cwd());
            const store = package.require('./store');
            const fullPath = resolveDocumentPath(package, path);
            const source = await store.read(fullPath);
            console.log(source);

        } catch (error) {
            logger.error(error.message);
        }
    });


cmd.command("render <path> [args...]")
    .description("render a document and print it to the stdout")
    .action(async (path, args) => {
        try {
            const package = Package.find(process.cwd());
            const store = package.require('./store');
            const id = resolveDocumentPath(package, path) + '?' + args.join('&');
            const {text} = await store.load(id);
            console.log(text);

        } catch (error) {
            logger.error(error.message);
        }
    });


cmd.command("list [path]")
    .description("list the content of a directory")
    .action(async (path=".") => {
        try {
            const package = Package.find(process.cwd());
            const store = package.require('./store');
            const dirPath = resolveDocumentPath(package, path);
            const items = (await store.list(dirPath)).filter(name => name[0] !== '.');
            console.log(`${items.length} items found in ${dirPath}:`);
            for (let item of items) console.log(`- ${item}`);

        } catch (error) {
            logger.error(error.message);
        }
    });


cmd.command("run <command> [args...]")
    .description("run a custom command")
    .action(async (command, args) => {
        const package = Package.find(process.cwd());
        const store = package.require('./store');
        const commands = package.require('./commands');
        if (typeof commands[command] !== "function") {
            logger.error(`Unknown command: ${command}`);
        } else {
            try {
                const options = parseParameters(args);
                commands[command](store, options);
            } catch (error) {
                logger.error(error.message);
            }
        }
    });


cmd.command("commands")
    .description("list all the available run sub-commands")
    .action(async (command, args) => {
        const package = Package.find(process.cwd());
        const commands = package.require('./commands');
        for (let commandName of Object.keys(commands).sort()) {
            console.log(commandName);
        }
    });



function resolveDocumentPath (package, path) {
    const rootPath = package.resolvePath('..');
    const relativeCWD = pathlib.join('/', process.cwd().slice(rootPath.length));
    return pathlib.resolve(relativeCWD, path);
}

// Given a list of argument ['par1=val1', 'par2=val2', 'par3=val3', ...],
// converts it to an object ontaining the ke-value pair contained in the list
function parseParameters (keyValuePairs) {
    const argns = {};
    for (let keyValuePair of keyValuePairs) {
        const separatorIndex = keyValuePair.indexOf("=");
        if (separatorIndex === -1) {
            let name = keyValuePair.trim();
            if (isValidName(name)) argns[name] = true;
        } else {
            let name = keyValuePair.slice(0, separatorIndex).trim();
            if (isValidName(name)) {
                let string = keyValuePair.slice(separatorIndex+1).trim();
                let number = Number(string);
                argns[name] = isNaN(number) ? string : number;
            }
        }
    }
    return argns;
}

const isValidName = val => /^[a-z_A-Z]+[a-z_A-Z0-9]*$/.test(val);


cmd.parse( process.argv );
