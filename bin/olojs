#!/usr/bin/env node

const logger = require("js-logger");
logger.useDefaults();

const pathlib = require('path');
const fs = require('fs');

const Package = require("../lib/package");

const cmd = require("commander");

cmd.version(`v${require("../package.json").version}`, "-v --version");

cmd.command("init")
    .description("Initializes the current directory as the root of an olojs document package")
    .action(async () => {
        try {
            logger.info(`@olojs: Initializing olojs package ...`);
            const package = await Package.create(process.cwd());
            logger.info("@olojs: Package successfully initialized.");

        } catch (error) {
            logger.error(error.message);
        }
    });

cmd.command("install <plugin>")
    .description("Installs a plugin")
    .action(async (packageId) => {
        logger.info(`@olojs: installing ${packageId}`);
        try {
            const package = Package.find(process.cwd());
            await package.install(packageId);
            logger.info(`@olojs: ${packageId} plugin installed`);

        } catch (error) {
            logger.error(error.message);
        }
    });

cmd.command("uninstall <plugin>")
    .description("Uninstalls a plugin")
    .action(async (packageId) => {
        logger.info(`@olojs: uninstalling ${packageId}`);
        try {
            const package = Package.find(process.cwd());
            await package.uninstall(packageId);
            logger.info(`@olojs: ${packageId} plugin uninstalled`);

        } catch (error) {
            logger.error(error.message);
        }
    });

cmd.command("read <path>")
    .description("Fetches a document source and prints it to the stdout")
    .action(async path => {
        try {
            const package = Package.find(process.cwd());
            const fullPath = resolveDocumentPath(package, path);
            const source = await package.store.read(fullPath);
            console.log(source);

        } catch (error) {
            logger.error(error.message);
        }
    });

cmd.command("render <path> [args...]")
    .description("Render a document and prints it to the stdout")
    .action(async (path, args) => {
        try {
            const package = Package.find(process.cwd());
            const id = resolveDocumentPath(package, path) + '?' + args.join('&');
            const {text} = await package.store.load(id);
            console.log(text);

        } catch (error) {
            logger.error(error.message);
        }
    });

cmd.command("list [path]")
    .description("Lists the content of a directory")
    .action(async (path=".") => {
        try {
            const package = Package.find(process.cwd());
            const dirPath = resolveDocumentPath(package, path);
            const items = (await package.store.list(dirPath)).filter(name => name[0] !== '.');
            console.log(`${items.length} items found in ${dirPath}:`);
            for (let item of items) console.log(`- ${item}`);

        } catch (error) {
            logger.error(error.message);
        }
    });

cmd.command("start [server-name]")
    .description("Serve the current package over HTTP")
    .option('-p, --port <port>', "Define the port to listen to")
    .action((serverName, flags) => {
        try {
            if (!serverName) serverName = "default";
            const portNumber = flags.port || 8010;

            const package = Package.find(process.cwd());
            const {routes, servers} = package.config;
            const store = new package.olojs.Router(package.config.routes);

            const Server = servers[serverName];
            if (!Server) throw new Error(`Unknown server: ${serverName}`);

            Server(store).listen(portNumber, err => {
                if (err) logger.error(err.message);
                else logger.info(`${serverName} server listening on port ${portNumber}`);
            });

        } catch (error) {
            logger.error(error.message);
        }
    });

cmd.parse( process.argv );



function resolveDocumentPath (package, path) {
    const rootPath = package.resolvePath('..');
    const relativeCWD = pathlib.join('/', process.cwd().slice(rootPath.length));
    return pathlib.resolve(relativeCWD, path);
}
