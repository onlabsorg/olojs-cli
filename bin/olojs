#!/usr/bin/env node

const logger = require("js-logger");
logger.useDefaults();

const Library = require("../lib/library");
const library = new Library( process.cwd() );


const cmd = require("commander");

cmd.version(`v${require("../package.json").version}`, "-v --version");

cmd.command("init")
    .description("Initializes the current directory as olo-docs repository")
    .action(async () => {
        logger.info(`Initializing olo-documents repository ...`);
        try {
            await library.init();
            logger.info("Library successfully initialized.");
        } catch (error) {
            logger.error(error.message);
        }
    });
    
cmd.command("install <package>")
    .description("Installs an olojs plugin")
    .action(async (package) => {
        logger.info("Installing plugin ...");
        try {
            await library.install(package);
            let packageName = library.package.getPackageJson(package).name;
            logger.info(`${packageName} successfully installed.`);
        } catch (error) {
            logger.error(error.message);
        }
    });

cmd.command("mount <name> <path> [args...]")
    .description("Creates a mount point for a store")
    .action(async (name, path, ...args) => {
        try {
            await library.mount(name, path);
            logger.info(`${path} store mounted on /${name}`);
        } catch (error) {
            logger.error(error.message);
        }
    });

cmd.command("unmount <name>")
    .description("Removes a store mount point")
    .action(async (name) => {
        try {
            await library.unmount(name);
            logger.info(`Mount point /${name} removed`);
        } catch (error) {
            logger.error(error.message);
        }
    });

cmd.command("render <path> [args...]")
    .description("Render a document from the current repository")
    .action(async (path, args) => {     
        const id = path + '?' + args.join('&');
        const renderedDoc = await library.render(id);
        console.log(renderedDoc);
    });

cmd.command("serve")
    .description("Serve the current repository over HTTP")
    .option('-t, --type <type>', "Define the type of server to be used")
    .option('-p, --port <port>', "Define the port to listen to")
    .action(async (flags) => {
        const serverType = flags.type || "@onlabsorg/olojs/lib/servers/http";
        const port = flags.port || 8010;
        await library.serve(serverType, port);
        logger.info(`${serverType} server listening on port ${port}`);
    });

cmd.parse( process.argv );
