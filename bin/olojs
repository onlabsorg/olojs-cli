#!/usr/bin/env node

const logger = require("js-logger");
logger.useDefaults();

const pathlib = require('path');
const fs = require('fs');
const Package = require("../lib/package");
const package = Package(process.cwd());



const cmd = require("commander");

cmd.version(`v${require("../package.json").version}`, "-v --version");

cmd.command("init")
    .description("Initializes the current directory as olo-docs repository")
    .action(async () => {
        const cloneDirectory = require("../lib/clone-directory");
        try {
            const packagePath = package.resolvePath('./');             
            if (fs.existsSync(packagePath)) {
                throw new Error("@olojs: Package already initialized");
            }
            
            logger.info(`@olojs: Creating .olojs directory ...`);
            await cloneDirectory(`${__dirname}/../package-template`, packagePath);
            
            logger.info(`@olojs: Installing dependencies ...\n`);
            await package.spawn('npm', 'install');
            
            logger.info("@olojs: Package successfully initialized.");
        } catch (error) {
            logger.error(error.message);
        }
    });
    
cmd.command("install <package>")
    .description("Installs an olojs plugin")
    .action(async (packageId) => {
        logger.info(`@olojs: installing ${packageId}`);
        try {
            await package.spawn('npm', 'install', packageId, '--save');
            logger.info(`@olojs: Installation terminated.`);
        } catch (error) {
            logger.error(error.message);
        }
    });

cmd.command("mount <route> <id> [args...]")
    .description("Creates a mount point for a store")
    .action(async (route, id, args) => {
        const normRoute = pathlib.normalize(`/${route}/`);
        try {
            logger.info(`@olojs: Mounting ${id} store at ${normRoute}`);
            package.mountStore(normRoute, id, ...args);
            logger.info(`@olojs: Done.`);
        } catch (error) {
            logger.error(error.message);
        }
    });

cmd.command("unmount <route>")
    .description("Removes a store mount point")
    .action(async (route) => {
        const normRoute = pathlib.normalize(`/${route}/`);
        try {
            logger.info(`@olojs: Removing mount point ${normRoute} ...`);
            await package.unmountStore(normRoute);
            logger.info(`@olojs: Done.`);
        } catch (error) {
            logger.error(error.message);
        }
    });

cmd.command("render <path> [args...]")
    .description("Render a document from the current repository")
    .action(async (path, args) => {     
        const id = path + '?' + args.join('&');
        const environment = package.environment;
        const doc = await environment.readDocument(id);
        const context = doc.createContext();
        const docNS = await doc.evaluate(context);
        const renderedDoc = await environment.render(docNS);
        console.log(renderedDoc);
    });

cmd.command("serve")
    .description("Serve the current repository over HTTP")
    .option('-s, --server <type>', "Define the type of server to be used")
    .option('-p, --port <port>', "Define the port to listen to")
    .action(async (flags) => {
        const serverType = flags.server || "@onlabsorg/olojs/lib/servers/http";
        const portNumber = flags.port || 8010;
        const Server = package.require(serverType)
        const server = Server(package.environment);
        server.listen(portNumber, err => {
            if (err) logger.error(err.message); 
            else logger.info(`${serverType} server listening on port ${portNumber}`);
        });
    });

cmd.parse( process.argv );
